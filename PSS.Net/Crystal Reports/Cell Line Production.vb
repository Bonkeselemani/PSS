'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Cell_Line_Production
    Inherits DataSet
    
    Private tableelement1 As element1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("element1")) Is Nothing) Then
                Me.Tables.Add(New element1DataTable(ds.Tables("element1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property element1 As element1DataTable
        Get
            Return Me.tableelement1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Cell_Line_Production = CType(MyBase.Clone,Cell_Line_Production)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("element1")) Is Nothing) Then
            Me.Tables.Add(New element1DataTable(ds.Tables("element1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableelement1 = CType(Me.Tables("element1"),element1DataTable)
        If (Not (Me.tableelement1) Is Nothing) Then
            Me.tableelement1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Cell_Line_Production"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Cell_Line_Production.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableelement1 = New element1DataTable
        Me.Tables.Add(Me.tableelement1)
    End Sub
    
    Private Function ShouldSerializeelement1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub element1RowChangeEventHandler(ByVal sender As Object, ByVal e As element1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class element1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReportTitle As DataColumn
        
        Private columnDateRange As DataColumn
        
        Private columnGroup_Desc As DataColumn
        
        Private columnLine_Number As DataColumn
        
        Private columnUser_FullName As DataColumn
        
        Private columnShipType As DataColumn
        
        Private columnModel_Desc As DataColumn
        
        Private columnDevice_ID As DataColumn
        
        Private columnGroup_ID As DataColumn
        
        Private columnLine_ID As DataColumn
        
        Private columnPallet_ShipType As DataColumn
        
        Private columnUser_ID As DataColumn
        
        Friend Sub New()
            MyBase.New("element1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ReportTitleColumn As DataColumn
            Get
                Return Me.columnReportTitle
            End Get
        End Property
        
        Friend ReadOnly Property DateRangeColumn As DataColumn
            Get
                Return Me.columnDateRange
            End Get
        End Property
        
        Friend ReadOnly Property Group_DescColumn As DataColumn
            Get
                Return Me.columnGroup_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Line_NumberColumn As DataColumn
            Get
                Return Me.columnLine_Number
            End Get
        End Property
        
        Friend ReadOnly Property User_FullNameColumn As DataColumn
            Get
                Return Me.columnUser_FullName
            End Get
        End Property
        
        Friend ReadOnly Property ShipTypeColumn As DataColumn
            Get
                Return Me.columnShipType
            End Get
        End Property
        
        Friend ReadOnly Property Model_DescColumn As DataColumn
            Get
                Return Me.columnModel_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Device_IDColumn As DataColumn
            Get
                Return Me.columnDevice_ID
            End Get
        End Property
        
        Friend ReadOnly Property Group_IDColumn As DataColumn
            Get
                Return Me.columnGroup_ID
            End Get
        End Property
        
        Friend ReadOnly Property Line_IDColumn As DataColumn
            Get
                Return Me.columnLine_ID
            End Get
        End Property
        
        Friend ReadOnly Property Pallet_ShipTypeColumn As DataColumn
            Get
                Return Me.columnPallet_ShipType
            End Get
        End Property
        
        Friend ReadOnly Property User_IDColumn As DataColumn
            Get
                Return Me.columnUser_ID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As element1Row
            Get
                Return CType(Me.Rows(index),element1Row)
            End Get
        End Property
        
        Public Event element1RowChanged As element1RowChangeEventHandler
        
        Public Event element1RowChanging As element1RowChangeEventHandler
        
        Public Event element1RowDeleted As element1RowChangeEventHandler
        
        Public Event element1RowDeleting As element1RowChangeEventHandler
        
        Public Overloads Sub Addelement1Row(ByVal row As element1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addelement1Row(ByVal ReportTitle As String, ByVal DateRange As String, ByVal Group_Desc As String, ByVal Line_Number As String, ByVal User_FullName As String, ByVal ShipType As String, ByVal Model_Desc As String, ByVal Device_ID As Long, ByVal Group_ID As Long, ByVal Line_ID As Long, ByVal Pallet_ShipType As Long, ByVal User_ID As Long) As element1Row
            Dim rowelement1Row As element1Row = CType(Me.NewRow,element1Row)
            rowelement1Row.ItemArray = New Object() {ReportTitle, DateRange, Group_Desc, Line_Number, User_FullName, ShipType, Model_Desc, Device_ID, Group_ID, Line_ID, Pallet_ShipType, User_ID}
            Me.Rows.Add(rowelement1Row)
            Return rowelement1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As element1DataTable = CType(MyBase.Clone,element1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New element1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReportTitle = Me.Columns("ReportTitle")
            Me.columnDateRange = Me.Columns("DateRange")
            Me.columnGroup_Desc = Me.Columns("Group_Desc")
            Me.columnLine_Number = Me.Columns("Line_Number")
            Me.columnUser_FullName = Me.Columns("User_FullName")
            Me.columnShipType = Me.Columns("ShipType")
            Me.columnModel_Desc = Me.Columns("Model_Desc")
            Me.columnDevice_ID = Me.Columns("Device_ID")
            Me.columnGroup_ID = Me.Columns("Group_ID")
            Me.columnLine_ID = Me.Columns("Line_ID")
            Me.columnPallet_ShipType = Me.Columns("Pallet_ShipType")
            Me.columnUser_ID = Me.Columns("User_ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnReportTitle = New DataColumn("ReportTitle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportTitle)
            Me.columnDateRange = New DataColumn("DateRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateRange)
            Me.columnGroup_Desc = New DataColumn("Group_Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroup_Desc)
            Me.columnLine_Number = New DataColumn("Line_Number", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine_Number)
            Me.columnUser_FullName = New DataColumn("User_FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUser_FullName)
            Me.columnShipType = New DataColumn("ShipType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShipType)
            Me.columnModel_Desc = New DataColumn("Model_Desc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModel_Desc)
            Me.columnDevice_ID = New DataColumn("Device_ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevice_ID)
            Me.columnGroup_ID = New DataColumn("Group_ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroup_ID)
            Me.columnLine_ID = New DataColumn("Line_ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLine_ID)
            Me.columnPallet_ShipType = New DataColumn("Pallet_ShipType", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPallet_ShipType)
            Me.columnUser_ID = New DataColumn("User_ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUser_ID)
            Me.columnDevice_ID.AllowDBNull = false
        End Sub
        
        Public Function Newelement1Row() As element1Row
            Return CType(Me.NewRow,element1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New element1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(element1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.element1RowChangedEvent) Is Nothing) Then
                RaiseEvent element1RowChanged(Me, New element1RowChangeEvent(CType(e.Row,element1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.element1RowChangingEvent) Is Nothing) Then
                RaiseEvent element1RowChanging(Me, New element1RowChangeEvent(CType(e.Row,element1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.element1RowDeletedEvent) Is Nothing) Then
                RaiseEvent element1RowDeleted(Me, New element1RowChangeEvent(CType(e.Row,element1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.element1RowDeletingEvent) Is Nothing) Then
                RaiseEvent element1RowDeleting(Me, New element1RowChangeEvent(CType(e.Row,element1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removeelement1Row(ByVal row As element1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class element1Row
        Inherits DataRow
        
        Private tableelement1 As element1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableelement1 = CType(Me.Table,element1DataTable)
        End Sub
        
        Public Property ReportTitle As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.ReportTitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.ReportTitleColumn) = value
            End Set
        End Property
        
        Public Property DateRange As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.DateRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.DateRangeColumn) = value
            End Set
        End Property
        
        Public Property Group_Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Group_DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Group_DescColumn) = value
            End Set
        End Property
        
        Public Property Line_Number As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Line_NumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Line_NumberColumn) = value
            End Set
        End Property
        
        Public Property User_FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.User_FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.User_FullNameColumn) = value
            End Set
        End Property
        
        Public Property ShipType As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.ShipTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.ShipTypeColumn) = value
            End Set
        End Property
        
        Public Property Model_Desc As String
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Model_DescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Model_DescColumn) = value
            End Set
        End Property
        
        Public Property Device_ID As Long
            Get
                Return CType(Me(Me.tableelement1.Device_IDColumn),Long)
            End Get
            Set
                Me(Me.tableelement1.Device_IDColumn) = value
            End Set
        End Property
        
        Public Property Group_ID As Long
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Group_IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Group_IDColumn) = value
            End Set
        End Property
        
        Public Property Line_ID As Long
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Line_IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Line_IDColumn) = value
            End Set
        End Property
        
        Public Property Pallet_ShipType As Long
            Get
                Try 
                    Return CType(Me(Me.tableelement1.Pallet_ShipTypeColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.Pallet_ShipTypeColumn) = value
            End Set
        End Property
        
        Public Property User_ID As Long
            Get
                Try 
                    Return CType(Me(Me.tableelement1.User_IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableelement1.User_IDColumn) = value
            End Set
        End Property
        
        Public Function IsReportTitleNull() As Boolean
            Return Me.IsNull(Me.tableelement1.ReportTitleColumn)
        End Function
        
        Public Sub SetReportTitleNull()
            Me(Me.tableelement1.ReportTitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateRangeNull() As Boolean
            Return Me.IsNull(Me.tableelement1.DateRangeColumn)
        End Function
        
        Public Sub SetDateRangeNull()
            Me(Me.tableelement1.DateRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroup_DescNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Group_DescColumn)
        End Function
        
        Public Sub SetGroup_DescNull()
            Me(Me.tableelement1.Group_DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLine_NumberNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Line_NumberColumn)
        End Function
        
        Public Sub SetLine_NumberNull()
            Me(Me.tableelement1.Line_NumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUser_FullNameNull() As Boolean
            Return Me.IsNull(Me.tableelement1.User_FullNameColumn)
        End Function
        
        Public Sub SetUser_FullNameNull()
            Me(Me.tableelement1.User_FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShipTypeNull() As Boolean
            Return Me.IsNull(Me.tableelement1.ShipTypeColumn)
        End Function
        
        Public Sub SetShipTypeNull()
            Me(Me.tableelement1.ShipTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModel_DescNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Model_DescColumn)
        End Function
        
        Public Sub SetModel_DescNull()
            Me(Me.tableelement1.Model_DescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroup_IDNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Group_IDColumn)
        End Function
        
        Public Sub SetGroup_IDNull()
            Me(Me.tableelement1.Group_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLine_IDNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Line_IDColumn)
        End Function
        
        Public Sub SetLine_IDNull()
            Me(Me.tableelement1.Line_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPallet_ShipTypeNull() As Boolean
            Return Me.IsNull(Me.tableelement1.Pallet_ShipTypeColumn)
        End Function
        
        Public Sub SetPallet_ShipTypeNull()
            Me(Me.tableelement1.Pallet_ShipTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUser_IDNull() As Boolean
            Return Me.IsNull(Me.tableelement1.User_IDColumn)
        End Function
        
        Public Sub SetUser_IDNull()
            Me(Me.tableelement1.User_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class element1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As element1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As element1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As element1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
